// LeetCode-04

/**
 * 给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。
 *
 * 字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。
 *
 * 说明：
 *
 * 字母异位词指字母相同，但排列不同的字符串。
 * 不考虑答案输出的顺序。
 *
 * 示例 1:
 *
 * 输入:
 * s: "cbaebabacd" p: "abc"
 *
 * 输出:
 * [0, 6]
 *
 * 解释:
 * 起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
 * 起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 *
 * 示例 2:
 *
 * 输入:
 * s: "abab" p: "ab"
 *
 * 输出:
 * [0, 1, 2]
 *
 * 解释:
 * 起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
 * 起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
 * 起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。
 *
 *
 * 思路
 * need是p字符串各个字符key和字符数量value的对象
 * win是目前滑动窗口的字符和字符数的对像
 * len是p的字符种类数量（比如：“aa”的len为1）
 * val为窗口当前满足need的字符种类数量
 *
 * 遍历s字符串
 * 进入窗口的字符在need上，加win窗口的字符数量，直到等于该字符need的数量，给val++
 * 出去窗口的字符在need上，减win窗口的字符数量，如果win减少之前满足need，给val--
 * 当val === len，j+1 就是其中一个答案
 *
 * （也可以只用len一个变量，方便理解就用多了val）
 */



/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
let s = 'abab',
  p = 'ab'
var findAnagrams = function(s, p) {}
